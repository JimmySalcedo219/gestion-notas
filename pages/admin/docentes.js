import React, { useEffect, useState } from "react";
import Head from 'next/head'
import Table from 'react-bootstrap/Table';
import Button from 'react-bootstrap/Button';
import { Form } from "react-bootstrap";

import AsignaturasService from '../../servicios/asignaturas'
import DocentesService from '../../servicios/docentes'
import styles from '../../styles/Home.module.css'

export default function Docentes(props){
  const [docenteId, setDocenteId] = useState(null)
  const [docenteNuevo, setDocenteNuevo] = useState(null)
  const [datos, setDatos] = useState([])
  const [datosAsig, setDatosAsig] = useState([])
  const [showEditar, setShowEditar] = useState(false)
  const [showAgregar, setShowAgregar] = useState(false)

  const traerDatos = async () => {
    const datos = await DocentesService.getAll()
    const asignaturas = await AsignaturasService.getAll()
    setDatos(datos.docentes)
    setDatosAsig(asignaturas.asignaturas)
  }

  const mostrarNuevoDocente = () => setShowAgregar(true)
  const agregarDocente = async (event) => {
    event.preventDefault()
    const formData = new FormData(event.currentTarget)
    const data = Object.fromEntries(formData)
    const { nombres, apellidos, username, pass, asignaturaId } = data

    if (nombres && apellidos && username && pass && asignaturaId && asignaturaId !== '0') {
      console.info('FormData', data)
      setShowAgregar(false)

      await DocentesService.nuevo(data)
      await traerDatos()
    }
  }

  const mostrarEditarDocente = (docente) => {
    setDocenteId(docente.id)
    setDocenteNuevo({
      nombres: docente.nombres,
      apellidos: docente.apellidos,
      username: docente.username,
    })
    setShowEditar(true)
  }
  const editarDocente = async (id) => {
    setShowEditar(false)
    await DocentesService.editar({ id, ...docenteNuevo })

    setDocenteId(null)
    setDocenteNuevo(null)
    await traerDatos()
  }

  const eliminarDocente = async (id) => {
    await DocentesService.eliminar(id)
    await traerDatos()
  }

  useEffect(() => {
    traerDatos()
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>CICLO III MISIÓN TIC 2022</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h3 className={styles.title} style={{marginBottom:"40px"}}>
          Docentes
        </h3>

        <div>
          <button type="button" className="btn btn-primary" onClick={ mostrarNuevoDocente }>
            Crear Docente
          </button>

          { showAgregar && (
            <Form onSubmit={ agregarDocente }>
              <Form.Group className="mb-3" controlId="nombres">
                <Form.Label>Nombres</Form.Label>
                <Form.Control type="text" placeholder="Nombres" name="nombres" required />
              </Form.Group>
              <Form.Group className="mb-3" controlId="apellidos">
                <Form.Label>Apellidos</Form.Label>
                <Form.Control type="text" placeholder="Apellidos" name="apellidos" required />
              </Form.Group>
              <Form.Group className="mb-3" controlId="username">
                <Form.Label>Usuario</Form.Label>
                <Form.Control type="text" placeholder="Usuario" name="username" required />
              </Form.Group>
              <Form.Group className="mb-3" controlId="pass">
                <Form.Label>Contraseña</Form.Label>
                <Form.Control type="password" placeholder="Contraseña" name="pass" required />
              </Form.Group>
              <Form.Group className="mb-3" controlId="asignaturaId">
                <Form.Label>Asignatura</Form.Label>
                <Form.Select aria-label="Seleccione una asignatura" name="asignaturaId" required>
                  <option value="0">Seleccione una asignatura</option>
                  { datosAsig.map((asig) => (
                    <option key={ asig.nombreAsig } value={ asig.id }>{ asig.nombreAsig }</option>
                  )) }
                </Form.Select>
              </Form.Group>
              <Button variant="primary" type="submit">
                Agregar
              </Button>
            </Form>
          )}
        </div>

        <Table striped bordered hover style={{ width: "900px", marginTop:"20px" }}>
          <thead>
            <tr>
              <th scope="col">ID</th>
              <th scope="col">Nombres</th>
              <th scope="col">Apellidos</th>
              <th scope="col">Usuario</th>
              <th scope="col">Asignatura</th>
              <th scope="col">Acciones</th>
            </tr>
          </thead>
          <tbody>
            { !!datos && datos.map((dato, i) => (
              <tr key={dato.nombres}>
                <th scope="row">{dato.id}</th>
                <td>
                  { docenteId !== dato.id && dato.nombres }
                  { (showEditar && docenteId === dato.id) && (
                    <input
                      required
                      type="text"
                      className="form-control mt-1"
                      placeholder="Digite sus nombres"
                      id="nombres"
                      name="nombres"
                      value={ docenteNuevo.nombres }
                      onChange={ (value) => setDocenteNuevo({ ...docenteNuevo, nombres: value.target.value }) }
                    />
                  )}
                </td>
                <td>
                  { docenteId !== dato.id && dato.apellidos }
                  { (showEditar && docenteId === dato.id) && (
                    <input
                      required
                      type="text"
                      className="form-control mt-1"
                      placeholder="Digite sus apellidos"
                      id="apellidos"
                      name="apellidos"
                      value={ docenteNuevo.apellidos }
                      onChange={ (value) => setDocenteNuevo({ ...docenteNuevo, apellidos: value.target.value }) }
                    />
                  )}
                </td>
                <td>
                  { docenteId !== dato.id && dato.username }
                  { (showEditar && docenteId === dato.id) && (
                    <input
                      required
                      type="text"
                      className="form-control mt-1"
                      placeholder="Digite su usuario"
                      id="username"
                      name="username"
                      value={ docenteNuevo.username }
                      onChange={ (value) => setDocenteNuevo({ ...docenteNuevo, username: value.target.value }) }
                    />
                  )}
                </td>
                <td>{dato.asignaturas[0].nombreAsig}</td>
                <td>
                  { docenteId !== dato.id && (
                    <>
                      <button type="button" className="btn btn-primary" onClick={ () => mostrarEditarDocente(dato) }>
                        Editar
                      </button>
                      <button type="button" className="btn btn-danger" onClick={ () => eliminarDocente(dato.id) }>
                        Eliminar
                      </button>
                    </>
                  ) }
                  { (showEditar && docenteId === dato.id) && (
                    <button type="button" className="btn btn-primary" onClick={ () => editarDocente(dato.id) }>
                      Guardar
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </Table>

        <div>
          <Button href="/admin" className="btn btn-success" style={{marginLeft: "480px"}}>
            Regresar
          </Button>
        </div>
      </main>
    </div>
  )
}
