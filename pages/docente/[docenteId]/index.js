import React, { useEffect, useState } from "react"
import Head from 'next/head'
import { useRouter } from "next/router"
import styles from '../../../styles/Home.module.css'
import Table from 'react-bootstrap/Table'
import { Button, Form } from "react-bootstrap"

import DocentesService from '../../../servicios/docentes'
import EstudiantesService from '../../../servicios/estudiantes'
import NotasService from '../../../servicios/notas'

export default function Docente(props) {
  const router = useRouter()
  const { docenteId } = router.query

  const [docente, setDocente] = useState(null)
  const [estudiantes, setEstudiantes] = useState([])
  const [showHacerCalificacion, setShowHacerCalificacion] = useState(false)
  const [estudianteDato, setEstudianteDato] = useState(null)
  const [nota, setNota] = useState(null)
  const [notaNueva, setNotaNueva] = useState(null)

  const traerDatos = async () => {
    if (docenteId) {
      const datos = await DocentesService.find(docenteId)
      setDocente(datos.docentes)
    }
  }

  const traerEstudiantes = async () => {
    const estudiantes = await EstudiantesService.getAll()
    setEstudiantes(estudiantes.estudiantes)
  }

  const hacerCalificacion = async (estudiante) => {
    const nota = await NotasService.find(estudiante.id, docente?.asignaturas[0]?.id)
    setEstudianteDato(estudiante)
    setNota(nota.nota)
    setNotaNueva({
      nota1: nota.nota.nota1,
      nota2: nota.nota.nota2,
      nota3: nota.nota.nota3,
      nota4: nota.nota.nota4,
      nota5: nota.nota.nota5,
    })
    setShowHacerCalificacion(true)
  }

  const cancelarCalificacion = () => {
    setEstudianteDato(null)
    setNota(null)
    setNotaNueva(null)
    setShowHacerCalificacion(false)
  }

  const guardarCalificacion = async (event) => {
    event.preventDefault()
    await NotasService.nuevo({
      ...notaNueva,
      estudianteId: estudianteDato.id,
      asignaturaId: docente?.asignaturas[0]?.id,
    })
    setShowHacerCalificacion(false)
  }

  useEffect(() => {
    traerDatos()
  }, [docenteId])

  useEffect(() => {
    traerEstudiantes()
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>CICLO III MISIÓN TIC 2022</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main1}>
        <h3 className={styles.title}>
          Bienvenido Docente { `${docente?.nombres} ${docente?.apellidos}` }
        </h3>

        <p className={styles.description}>
          A continuación encuentra los estudiantes a su cargo en Desarrollo de Software:
        </p>

        { showHacerCalificacion && (
          <Form onSubmit={ guardarCalificacion } style={{ width: '900px', display: 'flex', alignItems: 'center' }}>
            <h4 style={{ width: '400px' }}>{ `${estudianteDato?.nombres} ${estudianteDato?.apellidos}` }</h4>

            <Form.Group className="mb-3" controlId="nota1" style={{ width: '300px', marginRight: '4px' }}>
              <Form.Label>Nota 1</Form.Label>
              <Form.Control
                type="number"
                placeholder="Nota 1"
                name="nota1"
                min="0.0"
                step="0.1"
                max="5.0"
                value={ notaNueva?.nota1 }
                onChange={ (value) => setNotaNueva({ ...notaNueva, nota1: +value.target.value })}
              />
            </Form.Group>
            <Form.Group className="mb-3" controlId="nota2" style={{ width: '300px', marginRight: '4px' }}>
              <Form.Label>Nota 2</Form.Label>
              <Form.Control
                type="number"
                placeholder="Nota 2"
                name="nota2"
                min="0.0"
                step="0.1"
                max="5.0"
                value={ notaNueva?.nota2 }
                onChange={ (value) => setNotaNueva({ ...notaNueva, nota2: +value.target.value })}
              />
            </Form.Group>
            <Form.Group className="mb-3" controlId="nota3" style={{ width: '300px', marginRight: '4px' }}>
              <Form.Label>Nota 3</Form.Label>
              <Form.Control
                type="number"
                placeholder="Nota 3"
                name="nota3"
                min="0.0"
                step="0.1"
                max="5.0"
                value={ notaNueva?.nota3 }
                onChange={ (value) => setNotaNueva({ ...notaNueva, nota3: +value.target.value })}
              />
            </Form.Group>
            <Form.Group className="mb-3" controlId="nota4" style={{ width: '300px', marginRight: '4px' }}>
              <Form.Label>Nota 4</Form.Label>
              <Form.Control
                type="number"
                placeholder="Nota 4"
                name="nota4"
                min="0.0"
                step="0.1"
                max="5.0"
                value={ notaNueva?.nota4 }
                onChange={ (value) => setNotaNueva({ ...notaNueva, nota4: +value.target.value })}
              />
            </Form.Group>
            <Form.Group className="mb-3" controlId="nota5" style={{ width: '300px', marginRight: '4px' }}>
              <Form.Label>Nota 5</Form.Label>
              <Form.Control
                type="number"
                placeholder="Nota 5"
                name="nota5"
                min="0.0"
                step="0.1"
                max="5.0"
                value={ notaNueva?.nota5 }
                onChange={ (value) => setNotaNueva({ ...notaNueva, nota5: +value.target.value })}
              />
            </Form.Group>
            <div style={{ 'display': 'flex' }}>
              <Button variant="primary" type="submit" style={{ height: '50px', marginRight: '4px' }}>
                Guardar
              </Button>

              <Button variant="danger" style={{ height: '50px' }} onClick={ cancelarCalificacion }>
                Cancelar
              </Button>
            </div>
          </Form>
        )}

        <Table striped bordered hover>
          <thead>
            <tr>
              <th scope="col">No.</th>
              <th scope="col">Apellidos</th>
              <th scope="col">Nombres</th>
              <th scope="col">Grupo</th>
              <th scope="col">Acción</th>
            </tr>
          </thead>
          <tbody>
            { !!estudiantes && estudiantes.map((dato, i) =>(
              <tr key={dato.nombres}>
                <th scope="row">{ dato.id }</th>
                <td>{dato.apellidos}</td>
                <td>{dato.nombres}</td>
                <td>{dato.grupos[0].nomgrupo}</td>
                <td>
                  <button type="button" className="btn btn-primary" onClick={ () => hacerCalificacion(dato) }>
                    Calificar
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
        <div>
          <Button href="/login" className="btn btn-success" style={{marginLeft: "480px"}}>
            Salir
          </Button>
        </div>
      </main>
    </div>
  )
}